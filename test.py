# app.py
from flask import Flask, render_template, request, jsonify
import sympy as sp
import re
import math

app = Flask(__name__)

class PhysicsSolver:
    def __init__(self):
        self.g = 9.8  # —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
        
    def solve_kinematics(self, problem):
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∏"""
        problem_lower = problem.lower()
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –≤–≤–µ—Ä—Ö
        if any(word in problem_lower for word in ['–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ', '–≤–≤–µ—Ä—Ö', '–±—Ä–æ—à–µ–Ω–æ', '–ø–æ–¥–Ω–∏–º–µ—Ç—Å—è']):
            return self._solve_vertical_motion(problem)
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ–¥ —É–≥–ª–æ–º
        elif any(word in problem_lower for word in ['–ø–æ–¥ —É–≥–ª–æ–º', '—É–≥–æ–ª', '—Å–Ω–∞—Ä—è–¥']):
            return self._solve_projectile_motion(problem)
            
        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        elif any(word in problem_lower for word in ['—Å–∫–æ—Ä–æ—Å—Ç—å', '–≤—Ä–µ–º—è', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–¥–≤–∏–∂–µ—Ç—Å—è']):
            return self._solve_uniform_motion(problem)
            
        return "–ü–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–µ—à–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ üòä"

    def _solve_vertical_motion(self, problem):
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        numbers = [float(x) for x in re.findall(r'\d+\.?\d*', problem)]
        
        if '–≤—ã—Å–æ—Ç–∞' in problem.lower() and '—Å–∫–æ—Ä–æ—Å—Ç—å' in problem.lower():
            if len(numbers) >= 1:
                # –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ –≤—ã—Å–æ—Ç–µ
                h = numbers[0]
                v0 = math.sqrt(2 * self.g * h)
                return f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {v0:.2f} –º/—Å\n–§–æ—Ä–º—É–ª–∞: v‚ÇÄ = ‚àö(2gh)"
        
        elif '—Å–∫–æ—Ä–æ—Å—Ç—å' in problem.lower() and '–≤—Ä–µ–º—è' in problem.lower():
            if len(numbers) >= 2:
                v0, t = numbers[0], numbers[1]
                v = v0 - self.g * t
                h = v0 * t - (self.g * t**2) / 2
                return f"–°–∫–æ—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ {t} —Å: {v:.2f} –º/—Å\n–í—ã—Å–æ—Ç–∞: {h:.2f} –º"
                
        return "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—à–µ–Ω–∏—è!"

    def _solve_uniform_motion(self, problem):
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"""
        numbers = [float(x) for x in re.findall(r'\d+\.?\d*', problem)]
        
        if len(numbers) >= 2:
            if '—Å–∫–æ—Ä–æ—Å—Ç—å' in problem and '–≤—Ä–µ–º—è' in problem:
                v, t = numbers[0], numbers[1]
                s = v * t
                return f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {s:.2f} –º\n–§–æ—Ä–º—É–ª–∞: S = v √ó t"
                
            elif '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ' in problem and '–≤—Ä–µ–º—è' in problem:
                s, t = numbers[0], numbers[1]
                v = s / t
                return f"–°–∫–æ—Ä–æ—Å—Ç—å: {v:.2f} –º/—Å\n–§–æ—Ä–º—É–ª–∞: v = S / t"
        
        return "–£–∫–∞–∂–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã!"

class AlgebraSolver:
    def solve_equation(self, equation):
        """–†–µ—à–µ–Ω–∏–µ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        try:
            x = sp.Symbol('x')
            expr = equation.replace('=', '-(') + ')'
            solution = sp.solve(expr, x)
            return f"–†–µ—à–µ–Ω–∏–µ: x = {solution}"
        except:
            return "–ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å —ç—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ üòî"

@app.route('/')
def index():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>–§–∏–∑–∏–∫–æ-–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –†–µ—à–∞—Ç–µ–ª—å</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .container { background: #f5f5f5; padding: 20px; border-radius: 10px; }
            textarea { width: 100%; height: 100px; margin: 10px 0; }
            button { background: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
            .result { background: white; padding: 15px; margin: 10px 0; border-radius: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üßÆ –§–∏–∑–∏–∫–æ-–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –†–µ—à–∞—Ç–µ–ª—å</h1>
            
            <div>
                <h3>üìö –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ñ–∏–∑–∏–∫–µ:</h3>
                <textarea id="physicsProblem" placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É... 
–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–µ–ª–æ –±—Ä–æ—à–µ–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –≤–≤–µ—Ä—Ö —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 20 –º/—Å. –ù–∞ –∫–∞–∫—É—é –≤—ã—Å–æ—Ç—É –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è?"></textarea>
                <button onclick="solvePhysics()">–†–µ—à–∏—Ç—å</button>
                <div id="physicsResult" class="result"></div>
            </div>
            
            <div>
                <h3>‚ûó –†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:</h3>
                <input type="text" id="equation" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2*x + 5 = 13" style="width: 100%; padding: 10px;">
                <button onclick="solveAlgebra()">–†–µ—à–∏—Ç—å</button>
                <div id="algebraResult" class="result"></div>
            </div>
        </div>

        <script>
            function solvePhysics() {
                const problem = document.getElementById('physicsProblem').value;
                fetch('/solve/physics', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({problem: problem})
                })
                .then(r => r.json())
                .then(data => {
                    document.getElementById('physicsResult').innerHTML = 
                        `<strong>–†–µ—à–µ–Ω–∏–µ:</strong><br>${data.solution}`;
                });
            }

            function solveAlgebra() {
                const equation = document.getElementById('equation').value;
                fetch('/solve/algebra', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({equation: equation})
                })
                .then(r => r.json())
                .then(data => {
                    document.getElementById('algebraResult').innerHTML = 
                        `<strong>–†–µ—à–µ–Ω–∏–µ:</strong><br>${data.solution}`;
                });
            }
        </script>
    </body>
    </html>
    '''

@app.route('/solve/physics', methods=['POST'])
def solve_physics():
    data = request.json
    solver = PhysicsSolver()
    solution = solver.solve_kinematics(data['problem'])
    return jsonify({'solution': solution})

@app.route('/solve/algebra', methods=['POST'])
def solve_algebra():
    data = request.json
    solver = AlgebraSolver()
    solution = solver.solve_equation(data['equation'])
    return jsonify({'solution': solution})

if __name__ == '__main__':
    app.run(debug=True)